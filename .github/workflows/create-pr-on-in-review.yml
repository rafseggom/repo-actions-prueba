name: Create PR on In Review

on:
  issues:
    types: [edited]

jobs:
  create-pr:
    if: github.event.repository.fork == false
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
    - name: Check status change
      id: check_status
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const { changes, projects_v2_item } = context.payload;
          const statusChange = changes.find(c => 
            c.field?.name === 'Status' && 
            c.field.data_type === 'single_select' &&
            c.field_value?.option_name === 'In Review'
          );
          
          if (!statusChange || projects_v2_item.content_type !== 'Issue') {
            core.setOutput('trigger', 'false');
            return;
          }
          core.setOutput('trigger', 'true');

    - name: Get issue info
      if: steps.check_status.outputs.trigger == 'true'
      id: get_issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const { content_node_id } = context.payload.projects_v2_item;
          const response = await github.graphql(`
            query ($nodeId: ID!) {
              node(id: $nodeId) {
                ... on Issue {
                  number
                  title
                  labels(first: 10) {
                    nodes {
                      name
                    }
                  }
                }
              }
            }
          `, { nodeId: content_node_id });
          
          core.setOutput('number', response.node.number);
          core.setOutput('title', response.node.title);
          
          // Extract labels
          const labels = response.node.labels.nodes.map(node => node.name);
          core.setOutput('labels', JSON.stringify(labels));

    - name: Checkout repository
      if: steps.check_status.outputs.trigger == 'true'
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Find related branch
      if: steps.check_status.outputs.trigger == 'true'
      id: find_branch
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const issueNumber = ${{ steps.get_issue.outputs.number }};
          
          // Get all branches
          const { data: branches } = await github.rest.repos.listBranches({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          // Find branch that matches our pattern (type/number-title)
          const issueBranchPattern = new RegExp(`\\/${issueNumber}-`);
          const matchingBranch = branches.find(branch => issueBranchPattern.test(branch.name));
          
          if (!matchingBranch) {
            core.setFailed(`No branch found for issue #${issueNumber}`);
            return;
          }
          
          core.setOutput('branch_name', matchingBranch.name);
          console.log(`Found branch: ${matchingBranch.name} for issue #${issueNumber}`);

    - name: Create PR
      if: steps.check_status.outputs.trigger == 'true' && steps.find_branch.outputs.branch_name != ''
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const issueNumber = ${{ steps.get_issue.outputs.number }};
          const issueTitle = "${{ steps.get_issue.outputs.title }}";
          const branchName = "${{ steps.find_branch.outputs.branch_name }}";
          
          try {
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[#${issueNumber}] ${issueTitle}`,
              body: `Resolves #${issueNumber}`,
              head: branchName,
              base: 'main'
            });
            
            console.log(`Created PR #${pr.number} for issue #${issueNumber}`);
            
            // Add comment on the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `üìù Pull request [#${pr.number}](${pr.html_url}) has been created for this issue.`
            });
            
          } catch (error) {
            // Check if PR already exists
            if (error.message.includes('A pull request already exists')) {
              console.log('PR already exists for this branch');
              core.notice('A pull request already exists for this branch');
            } else {
              core.setFailed(`Error creating PR: ${error.message}`);
            }
          }