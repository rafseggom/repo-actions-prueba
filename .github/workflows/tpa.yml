name: Team Practices Automation

on:
  project_card:
    types: [created, moved]
  pull_request:
    types: [closed]

jobs:
  handle_issue_movement:
    runs-on: ubuntu-latest
    if: github.event_name == 'project_card'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Get card details
        id: card
        uses: actions/github-script@v6
        with:
          script: |
            const card = await github.rest.projects.getCard({
              card_id: context.payload.project_card.id
            });
            
            // Get the column name
            const column = await github.rest.projects.getColumn({
              column_id: context.payload.project_card.column_id
            });
            const columnName = column.data.name;
            console.log('Column name:', columnName);
            
            // Extract issue data if content_url exists
            if (card.data.content_url) {
              const issueUrl = card.data.content_url;
              const issueMatch = issueUrl.match(/\/issues\/(\d+)$/);
              if (issueMatch) {
                const issueNumber = issueMatch[1];
                
                // Get issue details
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                const issueTitle = issue.data.title;
                
                return {
                  columnName: columnName,
                  issueNumber: issueNumber,
                  issueTitle: issueTitle,
                  labels: issue.data.labels
                };
              }
            }
            
            return {
              columnName: columnName,
              issueNumber: null,
              issueTitle: null,
              labels: []
            };

      # When task moves to "In Progress" column
      - name: Create branch when moved to In Progress
        if: ${{ fromJson(steps.card.outputs.result).columnName == 'In Progress' && fromJson(steps.card.outputs.result).issueNumber != null }}
        run: |
          ISSUE_NUMBER="${{ fromJson(steps.card.outputs.result).issueNumber }}"
          ISSUE_TITLE="${{ fromJson(steps.card.outputs.result).issueTitle }}"
          
          # Sanitize title for branch name
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          
          # Default type is feature
          BRANCH_TYPE="feature"
          
          # Determine branch type based on labels
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                 "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/labels" | jq -r '.[].name')
          
          if echo "$LABELS" | grep -q "documentation"; then
            BRANCH_TYPE="documentation"
          elif echo "$LABELS" | grep -q "bug" || echo "$LABELS" | grep -q "hotfix"; then
            BRANCH_TYPE="hotfix"
          fi
          
          # Create and push branch
          BRANCH_NAME="${BRANCH_TYPE}/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b "$BRANCH_NAME" 
          git push origin "$BRANCH_NAME"
          
          echo "Created branch: $BRANCH_NAME"
          
          # Add comment to issue with branch info
          curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -d "{\"body\": \"🔨 Branch \`$BRANCH_NAME\` was automatically created for this issue.\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments"

      # When task moves to "In Review" column
      - name: Create PR when moved to In Review
        if: ${{ fromJson(steps.card.outputs.result).columnName == 'In Review' && fromJson(steps.card.outputs.result).issueNumber != null }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const issueNumber = ${{ fromJson(steps.card.outputs.result).issueNumber }};
            const issueTitle = '${{ fromJson(steps.card.outputs.result).issueTitle }}';
            
            // List branches that might be related to this issue
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Look for branch with issue number in name
            const issueBranch = branches.find(branch => branch.name.includes(`/${issueNumber}-`));
            
            if (!issueBranch) {
              console.log(`No branch found for issue #${issueNumber}`);
              return;
            }
            
            // Create PR
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `Resolves #${issueNumber}`,
                head: issueBranch.name,
                base: 'main'
              });
              
              console.log(`Created PR #${pr.number} for issue #${issueNumber}`);
              
              // Add comment on the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `📝 Pull request [#${pr.number}](${pr.html_url}) has been created for this issue.`
              });
            } catch (error) {
              console.error(`Error creating PR: ${error.message}`);
            }

  handle_pr_merged:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    steps:
      - name: Move issue to Done when PR is merged
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            // Extract issue number from PR body
            const prBody = context.payload.pull_request.body;
            const matches = prBody.match(/[Rr]esolves #(\d+)/);
            
            if (!matches) {
              console.log('No linked issue found in PR body');
              return;
            }
            
            const issueNumber = matches[1];
            console.log(`Found linked issue: #${issueNumber}`);
            
            // Get project columns
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            if (projects.length === 0) {
              console.log('No projects found');
              return;
            }
            
            // Find the Done column in the project
            for (const project of projects) {
              const { data: columns } = await github.rest.projects.listColumns({
                project_id: project.id
              });
              
              const doneColumn = columns.find(column => column.name === 'Done');
              if (!doneColumn) {
                console.log(`No 'Done' column found in project ${project.name}`);
                continue;
              }
              
              // Find the card for this issue
              let issueCards = [];
              for (const column of columns) {
                const { data: cards } = await github.rest.projects.listCards({
                  column_id: column.id
                });
                
                for (const card of cards) {
                  if (card.content_url && card.content_url.includes(`/issues/${issueNumber}`)) {
                    issueCards.push({ card, columnId: column.id });
                  }
                }
              }
              
              // Move the card to the Done column
              for (const {card, columnId} of issueCards) {
                if (columnId !== doneColumn.id) {
                  await github.rest.projects.moveCard({
                    card_id: card.id,
                    position: 'top',
                    column_id: doneColumn.id
                  });
                  console.log(`Moved issue #${issueNumber} to Done column in project ${project.name}`);
                }
              }
            }