name: Create Branch on In Progress

on:
  issues:
    types: [edited]

jobs:
  create-branch:
    if: github.event.repository.fork == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
    - name: Check status change
      id: check_status
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const { changes, projects_v2_item } = context.payload;
          const statusChange = changes.find(c => 
            c.field?.name === 'Status' && 
            c.field.data_type === 'single_select' &&
            c.field_value?.option_name === 'In Progress'
          );
          
          if (!statusChange) {
            core.setOutput('trigger', 'false');
            return;
          }
          
          if (projects_v2_item.content_type !== 'Issue') {
            core.setOutput('trigger', 'false');
            return;
          }
          
          core.setOutput('trigger', 'true');
          core.setOutput('content_node_id', projects_v2_item.content_node_id);

    - name: Get issue info
      if: steps.check_status.outputs.trigger == 'true'
      id: get_issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const content_node_id = '${{ steps.check_status.outputs.content_node_id }}';
          const response = await github.graphql(`
            query ($nodeId: ID!) {
              node(id: $nodeId) {
                ... on Issue {
                  number
                  title
                  repository {
                    owner {
                      login
                    }
                    name
                  }
                  labels(first: 20) {
                    nodes {
                      name
                    }
                  }
                }
              }
            }
          `, { nodeId: content_node_id });
          
          const issue = response.node;
          core.setOutput('number', issue.number);
          core.setOutput('title', issue.title);
          core.setOutput('labels', issue.labels.nodes.map(l => l.name).join(','));
          core.setOutput('repo_owner', issue.repository.owner.login);
          core.setOutput('repo_name', issue.repository.name);

    - name: Determine branch type
      if: steps.check_status.outputs.trigger == 'true'
      id: branch_type
      run: |
        if [[ "${{ steps.get_issue.outputs.labels }}" == *"documentation"* ]]; then
          echo "type=documentation" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.get_issue.outputs.labels }}" == *"bug"* ]] || [[ "${{ steps.get_issue.outputs.labels }}" == *"hotfix"* ]]; then
          echo "type=hotfix" >> $GITHUB_OUTPUT
        else
          echo "type=feature" >> $GITHUB_OUTPUT
        fi

    - name: Create branch name
      if: steps.check_status.outputs.trigger == 'true'
      id: branch_name
      run: |
        SANITIZED_TITLE=$(echo "${{ steps.get_issue.outputs.title }}" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9]/-/g' -e 's/-\{2,\}/-/g' -e 's/^-//' -e 's/-$//')
        echo "name=${{ steps.branch_type.outputs.type }}/${{ steps.get_issue.outputs.number }}-${SANITIZED_TITLE}" >> $GITHUB_OUTPUT

    - name: Checkout repository
      if: steps.check_status.outputs.trigger == 'true'
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}

    - name: Create branch
      if: steps.check_status.outputs.trigger == 'true'
      id: create_branch
      uses: peterjgrainger/action-create-branch@v3
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        branch: ${{ steps.branch_name.outputs.name }}

    - name: Notify issue about branch creation
      if: steps.check_status.outputs.trigger == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const issueNumber = ${{ steps.get_issue.outputs.number }};
          const branchName = '${{ steps.branch_name.outputs.name }}';
          const repoOwner = '${{ steps.get_issue.outputs.repo_owner }}';
          const repoName = '${{ steps.get_issue.outputs.repo_name }}';
          
          // Create a link to the branch
          const branchUrl = `https://github.com/${repoOwner}/${repoName}/tree/${branchName}`;
          
          try {
            await github.rest.issues.createComment({
              owner: repoOwner,
              repo: repoName,
              issue_number: issueNumber,
              body: `ðŸ”¨ Branch \`${branchName}\` has been created for this issue.\n\n[View branch](${branchUrl})`
            });
            console.log(`Added comment to issue #${issueNumber} about branch creation`);
          } catch (error) {
            core.setFailed(`Failed to comment on issue: ${error.message}`);
          }